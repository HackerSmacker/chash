





















.TH "CHASH_ASSIGN" "cware" "March 8th, 2022" "" \
    "C-Ware Manual"


.SH NAME
chash_assign - assign a key value pair to a hashtable

.SH SYNOPSIS

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.BI "#define chash_assign(" "hashtable" ", " "_key" ", "_value" ", " \
"namespace" ");"

.SH DESCRIPTION
The
.B chash_assign
macro will assign a key value pair to a hashtable based off the hash of
.IR _key .
If the hashtable is in heap mode, and the load factor of the hashtable has been
computed to be above or equal to the load threshold, then the hashtable will be
resized, copying all keys over to a new hashtable. If, however, in stack mode,
then this macro will produce an error


This macro will print an error message to the stderr, and exit the program when
any of the following conditions are met:
.RS


.IP \[bu] 0.4i
The buffer is NULL
.br


.IP \[bu] 0.4i
The length is less than or equal to zero
.br


.IP \[bu] 0.4i
The hashtable is full
.br


.RE



.I hashtable
will be the variable to initialise the hashtable into
.br
.I _key
will be the stack array to use for the contents
.br
.I _value
will be the maximum length of the stack array
.br
.I namespace
will be the namespace of the hashtbale settings to use
.br

.SH EXAMPLES

/*
 * This example showcases how to use the
.B chash_init_stack
macro.
.br
*/


.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.TS
tab(;);
l l
.
#define STRING_TABLE_HEAP;0
#define STRING_TABLE_BUCKET;struct StringBucket
#define STRING_TABLE_FREE_KEY(key);
#define STRING_TABLE_HASH(key, hash);chash_string_hash(key, hash)
#define STRING_TABLE_FREE_VALUE(value);NULL
#define STRING_TABLE_COMPARE(cmp_a, cmp_b);chash_string_compare(cmp_a, cmp_b)
.TE

struct StringBucket {
    char *key;
    int value;
    int state;
.br
};

struct StringHashtable {
    int length;
    int capacity;
    struct StringBucket *buckets;
.br
};


int main(void) {
    struct StringBucket buckets[10] = {0};
    struct StringHashtable hashtable = chash_init_stack(&hashtable,
                                                        STRING_TABLE, buckets,
                                                        10);

    /* Perform operations on the hashtable */
    chash_assign(&hashtable, "foo", 1);
    chash_assign(&hashtable, "bar", 2);

    /* Free the hashtable */
    chash_free(&hashtable, STRING_TABLE);

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO

.BR cware (cware),
.BR chash (cware)

